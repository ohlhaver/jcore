#!/usr/bin/env ruby
require File.join(File.dirname(__FILE__), '../jcore')
require 'pp'
require 'optparse'

options = {}

OptionParser.new do |opts|
  opts.banner = "Usage:\n    ruby #{$0} -s source1,source2,source3.."
  opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
    options[:verbose] = v
  end
  opts.on("-s", "--sources x,y,z", Array, "List of sources to learn") do |list|
    options[:sources] = list
  end
  opts.on("-k", "--max_pattern_length val", Integer, "Max pattern length for suffix and prefix (By Default: 20)") do |k|
    options[:max_length] = k
    options[:max_length] = 20 if options[:max_length].to_i < 1
  end
  opts.on("-h", "--help", "Show this message") do
    puts opts
    exit
  end
end.parse!
STDERR<<"Required option -s not specified\n"  && exit if options[:sources].nil? || options[:sources].empty?

LabeledStoriesHome = File.expand_path( File.join( File.dirname(__FILE__), "../data/labeled_stories" ) ).freeze
LearnedTemplatesHome = File.expand_path( File.join( File.dirname(__FILE__), "../data/learned_templates" ) ).freeze

options[:sources].each do |source|
  input_files = Dir[ "#{LabeledStoriesHome}/#{source}_???.k*.html" ]
  STDERR<<"No labeled stories for source found in data/labeled_stories folder\n" && exit if input_files.empty?
  output_template = "#{LearnedTemplatesHome}/#{source}.jseq"
  templates = Array.new
  input_files.each do |file|
    #puts "Learning file: #{file}"
    document = File.open(file).read
    k = file.match(/\.k(\d+)\./)[1].to_i
    template = JCore::Template.new([:headline, :author, :image, :story], file, k)
    begin
      template = JCore::Learner.learn(document, template)
    rescue StandardError => message
      puts "Error: #{message}"
    else
      templates << template
    end
  end
  JCore::Template.serialize(templates, output_template)
end