#!/usr/bin/env ruby
require File.join(File.dirname(__FILE__), '../jcore')
require File.join(File.dirname(__FILE__), '../lib/keyword')
require 'pp'
require 'optparse'
require 'open-uri'
require 'iconv'

options = { :optimize => true , :language => 'en' }

OptionParser.new do |opts|
  opts.banner = "Usage:\n    ruby #{$0} -s source -u url1,url2,url3.."
  opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
    options[:verbose] = v
  end
  opts.on("-u", "--url x", String, "List of urls to crawl [Required]") do |list|
    options[:urls] = [ list ]
  end
  opts.on("-s", "--source s", String, "Source name [Required]") do |s|
    options[:source] = s
  end
  opts.on("-l", "--language l", String, "Language of content [Default: en]") do |l|
    options[:language] = l
  end
  opts.on("-o", "Turn off template optimization") do |m|
    options[:optimize] = false
  end
  opts.on("-h", "--help", "Show this message") do
    puts opts
    exit
  end
end.parse!
STDERR<<"Required option -s not specified\n"  && exit if options[:source].nil? || options[:source].empty?
STDERR<<"Required option -u not specified\n"  && exit if options[:urls].nil? || options[:urls].empty?

LearnedTemplatesHome = File.expand_path( File.join( File.dirname(__FILE__), "../data/learned_templates" ) ).freeze
input_file = Dir[ "#{LearnedTemplatesHome}/#{options[:source]}.jseq" ].first
STDERR<<"Template Error: Do not know about the source - #{options[:source]}\n" && exit if input_file.nil?

templates = JCore::Template.load(input_file)
templates = JCore::Template.optimize_templates(templates) if options[:optimize]

options[:urls].each_with_index do |url, index|
  puts url
  file = open( url )
  doc = Iconv.conv( 'utf-8', file.charset, file.read )
  
  information = JCore::Extracter.extract( doc, templates )
  puts "Headline"
  puts "--------"
  puts information[:headline] || "Information not found"
  puts "\nAuthor"
  puts "------"
  puts information[:author] || "Information not found"
  puts "\nImage"
  puts "------"
  puts information[:image] || "Information not found"
  puts "\nStory"
  puts "-----"
  puts "Information not found" if information[:story].nil? || information[:story].empty?
  stories = information[:story].inject([]){ |s,x| !s.empty? && x.length > 20 ? (s.last << x) : s.push(x); s }
  stories.to_a.each_with_index do |story, index|
    puts "#{(index+1).to_s.rjust(4)}. FRAGMENT\n #{story}"
  end
  keywords = JCore::Keyword.keywords( JCore::Clean.story( stories.join(' ') ), options[:language] )
  puts "\nKeywords"
  puts keywords.join(', ')
  puts "-"*80
end